// My Day_21 code is here.

/*************************************************************************coin-change.cpp********************************************************************************/

/*
APPROACH::
(1) Use dynamic programming.
(2) Make a vector named 'dp' of size 'amount+1'.
(3) Now find out the minimum number of coins required to produce 'ith' amount using jth coins, where 0 <= i <= amount  and 'j' belong to coins vector.
(4) Finally return the answer stored in dp[amount].

TIME COMPLEXITY::
O(N)

SPACE COMPLEXITY::
O(1)
*/


class Solution {
public:
    int coinChange(vector<int>& coins, int amount)
    {
        if(amount == 0)
            return 0;
        vector<int> dp(amount+1, 0);
        dp[0] = 0;
        
        for(int i = 1; i <= amount; i++)
        {
                for(int j = 0; j < coins.size(); j++)
                {
                    if(coins[j] > i)
                        continue;
                    else if(i > coins[j]  &&  dp[i - coins[j]] == 0)
                        continue;
                    else if(coins[j] == i)
                        dp[coins[j]] = 1;
                    else if(dp[i] == 0)
                        dp[i] = dp[i - coins[j]] + dp[coins[j]];
                    else
                        dp[i] = min(dp[i], dp[i - coins[j]] + dp[coins[j]]);
                }
        }
        return (dp[amount] == 0 ? -1 : dp[amount]);
    }   
};

R E S U L T:
Runtime: 262 ms, faster than 10.44% of C++ online submissions for Coin Change.
Memory Usage: 14.4 MB, less than 68.59% of C++ online submissions for Coin Change.

188 / 188 test cases passed.
Status: Accepted
Runtime: 262 ms
Memory Usage: 14.4 MB
Submitted: 8 minutes ago
