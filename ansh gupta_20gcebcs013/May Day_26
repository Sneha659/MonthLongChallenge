//My May Day_26 code is here.

/******************************************************************number-of-1-bits.cpp*******************************************************************************/

/*
APPROACH::
(1) Just take a vector of size 32 bits (here 'b') and then add all the bits of the number 'n' into it.
(2) Now count the number of set bits from the vector 'b'.

TIME COMPLEXITY::
O(N), N = number of bits in n

SPACE COMPLEXITY::
O(1), constant
*/

class Solution {
public:
    int hammingWeight(uint32_t n)
    {
        vector<int> b(32, 0);
        int idx = 0, count = 0;
        
        while(n != 0)
        {
            b[idx] = n & 1;
            idx++;
            n = n>>1;
        }
        
        for(int i = 0; i < 32; i++)
        {
            if(b[i] == 1)
                count++;
        }
        return count;
    }
};

/********************************************************************************************************************************************************************
Runtime: 3 ms, faster than 54.92% of C++ online submissions for Number of 1 Bits.
Memory Usage: 6.2 MB, less than 48.74% of C++ online submissions for Number of 1 Bits.

601 / 601 test cases passed.
Status: Accepted
Runtime: 3 ms
Memory Usage: 6.2 MB
Submitted: 1 minute ago
*********************************************************************************************************************************************************************/
