class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        
     int max=*max_element(nums.begin(),nums.end());
            int n =nums.size(),flag1=0,flag2=0,i,j,c;
            
            for( i=1;i<n;i++)
            {
                   if(nums[i-1]>=nums[i])
                   {
                           flag1=1;
                           break;
                   }
            }
            for( j=n-1;j>=(i-1);j--)
            {
                   // cout<<"1"<<endl;
                     if(nums[j]==max)
                          { 
                            // cout<<"2"<<endl; 
                             continue;}
                    else
                    { 
                          //  cout<<"3"<<endl;
                            if(nums[j]>nums[j-1])
                                 {
                                  //  cout<<"4"<<endl;
                                    continue;}
                            else
                            {  
                                   // cout<<"5"<<endl;
                                    flag2=1;
                                    cout<<j<<endl;
                                    break;
                            }
                    //  cout<<"6"<<endl;
                    }
            }
           // cout<<"i"<<i<<"j"<<j;
            if(flag1==0 && flag2==0)
                    return 0;
            else
            {
                     c=j-(i-1)+1;
            }
         
            return c;
    }
};
Time Complexity :O(n)
Space Complexity : O(1)
