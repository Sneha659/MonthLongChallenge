/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 
 * };
 */
 //By calling next repeatedly until hasNext returns false
 
class NestedIterator {
public:
    vector<int>vec;
    int cnt = 0;
  void checkData(vector<NestedInteger> &nestedList) {
       for(int i =0; i< nestedList.size(); i++){
           if(nestedList[i].isInteger()){
               vec.push_back(nestedList[i].getInteger());

           }
           else{
               checkData(nestedList[i].getList());
           }
       }  
       }   

    NestedIterator(vector<NestedInteger> &nestedList) {
        checkData(nestedList);
    cnt= 0;
          }
    int next() {

        return vec[cnt++];
    }

    bool hasNext() {
        if(cnt < vec.size()) return true;
        else return false;
    }
};



/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
